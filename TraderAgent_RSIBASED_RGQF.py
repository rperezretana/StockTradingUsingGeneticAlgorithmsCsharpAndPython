#Imports
from quantopian.pipeline.data.builtin import USEquityPricing
import statsmodels.api as sm 
import quantopian.pipeline.data 
import numpy as np
import pandas as pd
import talib
import scipy

#This code was generated by the AgentTrainer ToroBot
class TraderAgent_RSIBASED_RGQF:
    # This agent was generated using ToroBot v3.1
    # Server it was born: EINSTEIN
    # TraderAgent ID: 2016_1__23_RSIBASED_RGQFS
    # Competing against 34,763 other agents.
    # Generation 34884
    # Training: 01/20/2016 06:03PM to 01/25/2016 10:23PM
    # Agent BD: 01/23/2016 2:32 AM
    # Target: XIV, VXX
    UseRsi = True
    RsiLowerLimitTrend = 15.034405676
    RsiLowerLimit = 29.983994984
    RsiUpperLimit = 75.01555712817
    RsiUpperLimitTrend = 84.9970186461
	StopLoss = 0.25
    StockSymbol_1 = symbol('XIV')
    StockSymbol_2 = symbol('VXX')
	#Backtest Result: 12/10/2010 - 01/25/2016 for 6722.17% profits


def initialize(context):

    set_benchmark(TraderAgent_RSIBASED_RGQF.StockSymbol_1)
    context.XIV = TraderAgent_RSIBASED_RGQF.StockSymbol_1 #symbol('XIV')
    context.VXX = TraderAgent_RSIBASED_RGQF.StockSymbol_2 #symbol('VXX')
    
    #Editable parameters
    context.xivTradePercent = 1
    context.vxxTradePercent = 1
    context.StopLossPct = TraderAgent_RSIBASED_RGQF.StopLoss
    
    #Used for logging
    context.StopPrice = 0
    context.BuyPrice = 0
    context.SellLossPrice = 0
    context.SellProfitPrice = 0
    context.last_bar = False
    context.sell = False
    context.buy = False
    context.buyVXX = False
    #FR#2: Delayed buy
    #FR#4: Improve buy/sell condition
    context.rsi_last = -1

    # On Bar Close Functions
    for x in [1,3,5]:
        schedule_function(my_rebalance, date_rules.every_day(), time_rules.market_open(hours=x, minutes=59))
    #FR#2: Delayed buy
    schedule_function(my_rebalance, date_rules.every_day(), time_rules.market_close())
    #schedule_function(my_rebalance, date_rules.every_day(), time_rules.market_open(hours=6, minutes=28))
    
    # On Bar Open Functions
    schedule_function(bar_open, date_rules.every_day(), time_rules.market_open())
    #FR#2: Delayed buy
    for x in [2,4,6]:
        schedule_function(bar_open, date_rules.every_day(), time_rules.market_open(hours=x))
    #for x in [1,3,5]:
        #schedule_function(bar_open, date_rules.every_day(), time_rules.market_open(hours=x, minutes=59))
    #schedule_function(my_record_vars, date_rules.every_day(), time_rules.market_close())

    #Set commission and slippage
    set_commission(commission.PerShare(cost=0.00, min_trade_cost=0)) 
    #set_slippage(slippage.FixedSlippage(spread=0.01))
    set_long_only()
    
def bar_open(context,data): 
    if context.buy is True and len(get_open_orders()) == 0 and data.can_trade(context.XIV):
        set_fixed_stop(context, data)
        if context.portfolio.positions[context.VXX].amount > 0:
            order_target_percent(context.VXX, 0)
            #log.info("Sell VXX at %.2f" %data.current(context.VXX, 'price'))
        order_target_percent(context.XIV,  context.xivTradePercent * 0.35)
        order_target_percent(context.XIV,  context.xivTradePercent * 0.3)
        order_target_percent(context.XIV,  context.xivTradePercent * 0.3)
        #log.info("Buy XIV at %.2f" %data.current(context.XIV, 'price'))
        context.buy = False
        context.sell = False
        context.buyVXX = False
        context.newsl = 0  
        
    if context.buyVXX is True and context.portfolio.positions[context.VXX].amount == 0 and len(get_open_orders()) == 0 and data.can_trade(context.VXX):
        #set_fixed_stop(context, data)
        order_target_percent(context.VXX,  context.vxxTradePercent * 0.35)
        order_target_percent(context.VXX,  context.vxxTradePercent * 0.3)
        order_target_percent(context.VXX,  context.vxxTradePercent * 0.3)
        #log.info("Buy VXX at %.2f" %data.current(context.VXX, 'price'))
        context.buyVXX = False
            
    if context.sell is True and context.portfolio.positions[context.XIV].amount > 0: 
        order_target_percent(context.XIV, 0)
        #log.info("Sell XIV at %.2f" %data.current(context.XIV, 'price'))
        context.sell = False
        context.buy = False 
 
def my_rebalance(context,data):
    xiv_prices = data.history(context.XIV, "price", 1600, "1m").resample('30T',  closed='right', label='right').last().dropna()

    #convert to 2 hour:
    xiv2hr = []
    if '20:00:00+00:00' in str(xiv_prices.index[-1]) or '21:00:00+00:00' in str(xiv_prices.index[-1]):
        xiv2hr.append([xiv_prices.index[-28], xiv_prices[-28]])
        xiv2hr.append([xiv_prices.index[-27], xiv_prices[-27]])        
        xiv2hr.append([xiv_prices.index[-23], xiv_prices[-23]])
        xiv2hr.append([xiv_prices.index[-19], xiv_prices[-19]])
        xiv2hr.append([xiv_prices.index[-15], xiv_prices[-15]])
        xiv2hr.append([xiv_prices.index[-14], xiv_prices[-14]])
        xiv2hr.append([xiv_prices.index[-10], xiv_prices[-10]])
        xiv2hr.append([xiv_prices.index[-6], xiv_prices[-6]])
        xiv2hr.append([xiv_prices.index[-2], xiv_prices[-2]])
        xiv2hr.append([xiv_prices.index[-1], xiv_prices[-1]])
        context.last_bar = True
    elif '19:30:00+00:00' in str(xiv_prices.index[-1]) or '20:30:00+00:00' in str(xiv_prices.index[-1]):
        xiv2hr.append([xiv_prices.index[-31], xiv_prices[-31]])
        xiv2hr.append([xiv_prices.index[-27], xiv_prices[-27]]) 
        xiv2hr.append([xiv_prices.index[-26], xiv_prices[-26]])
        xiv2hr.append([xiv_prices.index[-22], xiv_prices[-22]])
        xiv2hr.append([xiv_prices.index[-18], xiv_prices[-18]])
        xiv2hr.append([xiv_prices.index[-14], xiv_prices[-14]]) 
        xiv2hr.append([xiv_prices.index[-13], xiv_prices[-13]])
        xiv2hr.append([xiv_prices.index[-9], xiv_prices[-9]])
        xiv2hr.append([xiv_prices.index[-5], xiv_prices[-5]])
        xiv2hr.append([xiv_prices.index[-1], xiv_prices[-1]])
        context.last_bar = False
    elif '17:30:00+00:00' in str(xiv_prices.index[-1]) or '18:30:00+00:00' in str(xiv_prices.index[-1]):
        xiv2hr.append([xiv_prices.index[-31], xiv_prices[-31]])
        xiv2hr.append([xiv_prices.index[-27], xiv_prices[-27]]) 
        xiv2hr.append([xiv_prices.index[-23], xiv_prices[-23]])
        xiv2hr.append([xiv_prices.index[-22], xiv_prices[-22]])
        xiv2hr.append([xiv_prices.index[-18], xiv_prices[-18]])
        xiv2hr.append([xiv_prices.index[-14], xiv_prices[-14]])
        xiv2hr.append([xiv_prices.index[-10], xiv_prices[-10]])
        xiv2hr.append([xiv_prices.index[-9], xiv_prices[-9]])
        xiv2hr.append([xiv_prices.index[-5], xiv_prices[-5]])
        xiv2hr.append([xiv_prices.index[-1], xiv_prices[-1]])
        context.last_bar = False
    elif '15:30:00+00:00' in str(xiv_prices.index[-1]) or '16:30:00+00:00' in str(xiv_prices.index[-1]):
        xiv2hr.append([xiv_prices.index[-31], xiv_prices[-31]])
        xiv2hr.append([xiv_prices.index[-27], xiv_prices[-27]]) 
        xiv2hr.append([xiv_prices.index[-23], xiv_prices[-23]])
        xiv2hr.append([xiv_prices.index[-19], xiv_prices[-19]])
        xiv2hr.append([xiv_prices.index[-18], xiv_prices[-18]])
        xiv2hr.append([xiv_prices.index[-14], xiv_prices[-14]])        
        xiv2hr.append([xiv_prices.index[-10], xiv_prices[-10]])
        xiv2hr.append([xiv_prices.index[-6], xiv_prices[-6]])
        xiv2hr.append([xiv_prices.index[-5], xiv_prices[-5]])
        xiv2hr.append([xiv_prices.index[-1], xiv_prices[-1]])
        context.last_bar = False
    else:
        log.error("2 HOUR CONVERSION FAILURE")
        return
    dates, vals = zip(*xiv2hr)
    s = pd.Series(vals, index=dates)
    
    rsi = talib.RSI(s,2)
    #rsi7 = talib.RSI(s,7)
    record(RSI_2=rsi[-1])
    
    #FR#4: Improve buy/sell condition
    if context.rsi_last == -1:
        context.rsi_last = rsi[-2]
    
    if context.buy is False and context.rsi_last < TraderAgent_RSIBASED_RGQF.RsiUpperLimit and rsi[-1] >= TraderAgent_RSIBASED_RGQF.RsiUpperLimit and context.portfolio.positions[context.XIV].amount == 0:
        context.buy = True
        
    if context.rsi_last > TraderAgent_RSIBASED_RGQF.RsiUpperLimitTrend and rsi[-1] <= TraderAgent_RSIBASED_RGQF.RsiUpperLimitTrend and context.portfolio.positions[context.XIV].amount > 0 and len(get_open_orders()) == 0:
        order_target_percent(context.XIV, 0)
        context.buy = False
        
        if context.buyVXX is False and rsi[-1] <= TraderAgent_RSIBASED_RGQF.RsiLowerLimit and context.portfolio.positions[context.VXX].amount == 0:
         context.buyVXX = True

    # Buy VXX rule
    if context.buyVXX is False and context.rsi_last > TraderAgent_RSIBASED_RGQF.RsiLowerLimit and rsi[-1] <= TraderAgent_RSIBASED_RGQF.RsiLowerLimit and context.portfolio.positions[context.XIV].amount == 0 and context.portfolio.positions[context.VXX].amount == 0:
        context.buyVXX = True

    # Sell VXX rule
    if context.rsi_last < TraderAgent_RSIBASED_RGQF.RsiLowerLimitTrend and rsi[-1] >= TraderAgent_RSIBASED_RGQF.RsiLowerLimitTrend and context.portfolio.positions[context.VXX].amount > 0:
     order_target_percent(context.VXX, 0)
     context.buyVXX = False
        
    # panic button hard for safety:
    high = (data.history(context.XIV, "high", 119, "1m")).max()
    if context.last_bar:
        high = (data.history(context.XIV, "high", 29, "1m")).max()
    price = data.current(context.XIV, 'price')
    if ((high/price) - 1) > .1:
        order_target_percent(context.XIV, 0)
        context.sell = False
        context.buy = False
        
    #Update for next cicle         
    context.rsi_last = rsi[-1]
    
def set_fixed_stop(context, data):
    #Only call this once when the stock is bought
    price = data.current(context.XIV, 'price')
    context.BuyPrice = price
    context.SellLossPrice= max(context.StopPrice, price - (context.StopLossPct * price)) 

def handle_data(context, data):        
    if context.portfolio.positions[context.XIV].amount > 0 and context.BuyPrice > 0:     
        price = data.current(context.XIV, 'price')
        if price / context.BuyPrice >= 1.1:
            if context.BuyPrice > context.SellLossPrice:
                context.SellLossPrice = context.BuyPrice
                #context.SellLossPrice = price / 1.1
                log.info("New XIV stop loss price %.2f" %context.SellLossPrice)
        
        #FR#1: Add profit take 50%
        if price / context.BuyPrice >= 1.5:
            if context.BuyPrice > context.SellLossPrice:
                context.SellLossPrice = price
                
        #If we have a position check sell conditions
        if price <= context.SellLossPrice and len(get_open_orders()) == 0:
            order_target_percent(context.XIV,  0)
            context.sell = False
            context.buy = False            

def my_record_vars(context, data):    
    leverage = context.account.leverage
    record(leverage=leverage)